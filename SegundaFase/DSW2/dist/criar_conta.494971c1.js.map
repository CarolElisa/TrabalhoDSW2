{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,MAAM,eAAe,SAAS,cAAc,CAAC;IAE7C,gDAAgD;IAChD,eAAe,eAAe,GAAG;QAC/B,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,CAAC,yBAAyB,EAAE,IAAI,MAAM,CAAC;YACpE,MAAM,OAAO,MAAM,SAAS,IAAI;YAChC,IAAI,KAAK,IAAI,EACX,MAAM,IAAI,MAAM;YAElB,OAAO;QACT,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,uBAAuB;YACrC,MAAM;YACN,OAAO;QACT;IACF;IAEA,8CAA8C;IAC9C,eAAe,kBAAkB,GAAG;QAClC,MAAM,WAAW,MAAM,eAAe;QACtC,IAAI,UAAU;YACZ,SAAS,cAAc,CAAC,OAAO,KAAK,GAAG,SAAS,UAAU;YAC1D,SAAS,cAAc,CAAC,UAAU,KAAK,GAAG,SAAS,UAAU;YAC7D,SAAS,cAAc,CAAC,UAAU,KAAK,GAAG,SAAS,EAAE;QACvD;IACF;IAEA,4DAA4D;IAC5D,SAAS,cAAc,CAAC,OAAO,gBAAgB,CAAC,QAAQ,OAAO;QAC7D,MAAM,MAAM,MAAM,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,KAAK,kCAAkC;QACrF,IAAI,IAAI,MAAM,KAAK,GACjB,MAAM,kBAAkB;IAE5B;IAEA,kCAAkC;IAClC,aAAa,gBAAgB,CAAC,UAAU,OAAO;QAC7C,MAAM,cAAc;QAEpB,8BAA8B;QAC9B,MAAM,UAAU;YACd,MAAM,aAAa,aAAa,CAAC,sBAAsB,KAAK;YAC5D,OAAO,aAAa,aAAa,CAAC,uBAAuB,KAAK;YAC9D,KAAK,aAAa,aAAa,CAAC,qBAAqB,KAAK;YAC1D,OAAO,aAAa,aAAa,CAAC,0BAA0B,KAAK;YACjE,KAAK,SAAS,cAAc,CAAC,OAAO,KAAK;YACzC,YAAY,SAAS,cAAc,CAAC,OAAO,KAAK;YAChD,KAAK,SAAS,cAAc,CAAC,UAAU,KAAK;YAC5C,QAAQ,SAAS,cAAc,CAAC,UAAU,KAAK;YAC/C,IAAI,SAAS,cAAc,CAAC,UAAU,KAAK;QAC7C;QAEA,kCAAkC;QAClC,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,kCAAkC;gBAC7D,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,SAAS,EAAE,EAAE;gBACf,MAAM;gBACN,OAAO,QAAQ,CAAC,IAAI,GAAG,cAAc,qCAAqC;YAC5E,OACE,MAAM,IAAI,MAAM;QAEpB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,yBAAyB;YACvC,MAAM;QACR;IACF;AACF,IAEF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0FA0G0F","sources":["js/criar_conta.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const formCadastro = document.getElementById('form-cadastro');\r\n  \r\n    // Função para buscar o endereço a partir do CEP\r\n    async function buscarEndereco(cep) {\r\n      try {\r\n        const response = await fetch(`https://viacep.com.br/ws/${cep}/json/`);\r\n        const data = await response.json();\r\n        if (data.erro) {\r\n          throw new Error('CEP não encontrado');\r\n        }\r\n        return data;\r\n      } catch (error) {\r\n        console.error('Erro ao buscar CEP:', error);\r\n        alert('CEP não encontrado. Por favor, verifique o CEP digitado.');\r\n        return null;\r\n      }\r\n    }\r\n  \r\n    // Função para preencher os campos de endereço\r\n    async function preencherEndereco(cep) {\r\n      const endereco = await buscarEndereco(cep);\r\n      if (endereco) {\r\n        document.getElementById('rua').value = endereco.logradouro;\r\n        document.getElementById('cidade').value = endereco.localidade;\r\n        document.getElementById('estado').value = endereco.uf;\r\n      }\r\n    }\r\n  \r\n    // Evento para buscar o endereço quando o CEP for preenchido\r\n    document.getElementById('cep').addEventListener('blur', async (event) => {\r\n      const cep = event.target.value.replace(/\\D/g, ''); // Remove caracteres não numéricos\r\n      if (cep.length === 8) {\r\n        await preencherEndereco(cep);\r\n      }\r\n    });\r\n  \r\n    // Evento para enviar o formulário\r\n    formCadastro.addEventListener('submit', async (event) => {\r\n      event.preventDefault();\r\n  \r\n      // Coletar dados do formulário\r\n      const usuario = {\r\n        nome: formCadastro.querySelector('input[type=\"text\"]').value,\r\n        email: formCadastro.querySelector('input[type=\"email\"]').value,\r\n        tel: formCadastro.querySelector('input[type=\"tel\"]').value,\r\n        senha: formCadastro.querySelector('input[type=\"password\"]').value,\r\n        cep: document.getElementById('cep').value,\r\n        logradouro: document.getElementById('rua').value,\r\n        num: document.getElementById('numero').value,\r\n        cidade: document.getElementById('cidade').value,\r\n        uf: document.getElementById('estado').value,\r\n      };\r\n  \r\n      // Enviar dados para o JSON Server\r\n      try {\r\n        const response = await fetch('http://localhost:3000/usuarios', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(usuario),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          alert('Cadastro realizado com sucesso!');\r\n          window.location.href = 'login.html'; // Redireciona para a página de login\r\n        } else {\r\n          throw new Error('Erro ao cadastrar usuário');\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao enviar dados:', error);\r\n        alert('Erro ao cadastrar usuário. Tente novamente.');\r\n      }\r\n    });\r\n  });\r\n\r\n/* VERIFICAR DEPOIS SE REMOVE OU NÃO\r\n\r\n// Substitua pela sua chave de API do Mapbox\r\nconst MAPBOX_API_KEY = 'pk.eyJ1IjoiZ3VpZGluaTEiLCJhIjoiY203Z2RxcjZ1MDcyeDJqcHlsYjR2aWo5MiJ9.oJhoRhRSuZGFilAXan8sXw';\r\n\r\n// Função para buscar endereço pelo CEP usando a API do ViaCEP\r\nfunction buscarEnderecoPorCEP() {\r\n    const cep = document.getElementById('cep').value.replace(/\\D/g, ''); // Remove caracteres não numéricos\r\n    if (cep.length !== 8) {\r\n        alert(\"CEP inválido. O CEP deve ter 8 dígitos.\");\r\n        return;\r\n    }\r\n\r\n    fetch(`https://viacep.com.br/ws/${cep}/json/`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.erro) {\r\n                alert(\"CEP não encontrado.\");\r\n                return;\r\n            }\r\n\r\n            // Preenche os campos com os dados do CEP\r\n            document.getElementById('rua').value = data.logradouro;\r\n            document.getElementById('cidade').value = data.localidade;\r\n            document.getElementById('estado').value = data.uf;\r\n\r\n            // Após preencher os campos, monta o endereço completo e geocodifica\r\n            const enderecoCompleto = montarEnderecoCompleto();\r\n            geocodificarEndereco(enderecoCompleto, function(erro, coordenadas) {\r\n                if (erro) {\r\n                    alert(\"Erro ao geocodificar endereço: \" + erro);\r\n                    return;\r\n                }\r\n                // Aqui você pode enviar as coordenadas para o servidor\r\n                // Exemplo de envio para o servidor (substitua por sua lógica real)\r\n                // fetch('/cadastrar-usuario', {\r\n                //     method: 'POST',\r\n                //     body: JSON.stringify({ coordenadas: coordenadas }),\r\n                //     headers: { 'Content-Type': 'application/json' }\r\n                // });\r\n            });\r\n        })\r\n        .catch(error => {\r\n            alert(\"Erro ao buscar CEP. Tente novamente.\");\r\n        });\r\n}\r\n\r\n// Função para montar o endereço completo\r\nfunction montarEnderecoCompleto() {\r\n    const rua = document.getElementById('rua').value;\r\n    const numero = document.getElementById('numero').value;\r\n    const cidade = document.getElementById('cidade').value;\r\n    const estado = document.getElementById('estado').value;\r\n\r\n    // Monta o endereço no formato \"Rua, Número, Cidade, Estado, Brasil\"\r\n    return `${rua}, ${numero}, ${cidade}, ${estado}, Brasil`;\r\n}\r\n\r\n// Função para geocodificar o endereço usando a API do Mapbox\r\nfunction geocodificarEndereco(endereco, callback) {\r\n    fetch(`https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(endereco)}.json?access_token=${MAPBOX_API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (data.features && data.features.length > 0) {\r\n                const coordenadas = data.features[0].center; // [longitude, latitude]\r\n                callback(null, { longitude: coordenadas[0], latitude: coordenadas[1] });\r\n            } else {\r\n                callback(\"Endereço não encontrado. Verifique se o endereço está completo e correto.\", null);\r\n            }\r\n        })\r\n        .catch(error => {\r\n            callback(\"Erro ao geocodificar endereço: \" + error.message, null);\r\n        });\r\n}\r\n\r\n// Função para redirecionar para a página inicial\r\nfunction redirecionarParaHome(event) {\r\n    event.preventDefault(); // Impede o envio do formulário\r\n\r\n    // Monta o endereço completo\r\n    const enderecoCompleto = montarEnderecoCompleto();\r\n\r\n    // Geocodifica o endereço para obter as coordenadas\r\n    geocodificarEndereco(enderecoCompleto, function(erro, coordenadas) {\r\n        if (erro) {\r\n            alert(erro);\r\n            return;\r\n        }\r\n\r\n        // Aqui você pode enviar as coordenadas para o servidor\r\n        // Exemplo de envio para o servidor (substitua por sua lógica real)\r\n        // fetch('/cadastrar-usuario', {\r\n        //     method: 'POST',\r\n        //     body: JSON.stringify({ coordenadas: coordenadas }),\r\n        //     headers: { 'Content-Type': 'application/json' }\r\n        // });\r\n\r\n        // Redireciona para a página inicial\r\n        window.location.href = \"home.html\";\r\n    });\r\n}\r\n\r\n// Adiciona um evento para buscar o endereço quando o CEP for preenchido\r\ndocument.getElementById('cep').addEventListener('blur', buscarEnderecoPorCEP);\r\n\r\n// Adiciona um evento para o envio do formulário\r\ndocument.getElementById('form-cadastro').addEventListener('submit', redirecionarParaHome);*/"],"names":[],"version":3,"file":"criar_conta.494971c1.js.map","sourceRoot":"/__parcel_source_root/"}