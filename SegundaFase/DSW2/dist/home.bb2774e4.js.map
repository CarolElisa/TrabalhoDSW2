{"mappings":"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","sources":["js/home.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const userInfo = document.querySelector('h1'); // Elemento que exibe o nome do usuário\r\n    const contratanteSection = document.getElementById('contratante-section');\r\n    const prestadorSection = document.getElementById('prestador-section');\r\n    const btnContratante = document.getElementById('btn-contratante');\r\n    const btnPrestador = document.getElementById('btn-prestador');\r\n    const contratanteTableBody = contratanteSection.querySelector('tbody');\r\n    const prestadorTableBody = prestadorSection.querySelector('tbody');\r\n  \r\n    let usuario; // Armazena os dados do usuário logado\r\n    let tarefas; // Armazena as tarefas do JSON Server\r\n  \r\n    // Obtém o ID do usuário da URL\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const userId = urlParams.get('id');\r\n  \r\n    // Função para buscar informações do usuário\r\n    async function buscarUsuario(id) {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/usuarios/${id}`);\r\n        usuario = await response.json();\r\n        if (usuario) {\r\n          userInfo.textContent = `Bem-vindo(a), ${usuario.nome}!`;\r\n          carregarTarefas();\r\n        } else {\r\n          alert('Usuário não encontrado.');\r\n          window.location.href = 'login.html';\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao buscar usuário:', error);\r\n        alert('Erro ao carregar informações do usuário.');\r\n      }\r\n    }\r\n  \r\n    // Função para buscar tarefas do JSON Server\r\n    async function carregarTarefas() {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/tarefas');\r\n        tarefas = await response.json();\r\n        exibirTarefasContratante();\r\n      } catch (error) {\r\n        console.error('Erro ao buscar tarefas:', error);\r\n        alert('Erro ao carregar tarefas.');\r\n      }\r\n    }\r\n  \r\n    // Função para exibir tarefas como contratante\r\n    function exibirTarefasContratante() {\r\n      contratanteTableBody.innerHTML = tarefas\r\n        .filter((tarefa) => tarefa.tipo === 'Solicitação de Serviço')\r\n        .map(\r\n          (tarefa) => `\r\n            <tr>\r\n              <td class=\"p-2 border text-center\">${tarefa.nome}</td>\r\n              <td class=\"p-2 border text-center\">${tarefa.descricao}</td>\r\n              <td class=\"p-2 border text-center\">${tarefa.distancia || 'N/A'}</td>\r\n              <td class=\"p-2 border text-center\">${tarefa.status || 'Pendente'}</td>\r\n              <td class=\"p-2 border text-center\">\r\n                <button class=\"bg-blue-900 text-white p-1 rounded hover:bg-blue-800\" onclick=\"editarTarefa(${tarefa.id})\">Editar</button>\r\n                <button class=\"bg-red-500 text-white p-1 rounded hover:bg-red-600\" onclick=\"excluirTarefa(${tarefa.id})\">Excluir</button>\r\n              </td>\r\n            </tr>\r\n          `\r\n        )\r\n        .join('');\r\n    }\r\n  \r\n    // Função para exibir tarefas como prestador\r\n    function exibirTarefasPrestador() {\r\n      prestadorTableBody.innerHTML = tarefas\r\n        .filter((tarefa) => tarefa.tipo === 'Oferta de Serviço')\r\n        .map(\r\n          (tarefa) => `\r\n            <tr>\r\n              <td class=\"p-2 border text-center\">${tarefa.nome}</td>\r\n              <td class=\"p-2 border text-center\">${tarefa.descricao}</td>\r\n              <td class=\"p-2 border text-center\">${tarefa.distancia || 'N/A'}</td>\r\n              <td class=\"p-2 border text-center\">${tarefa.status || 'Pendente'}</td>\r\n              <td class=\"p-2 border text-center\">\r\n                <button class=\"bg-blue-900 text-white p-1 rounded hover:bg-blue-800\" onclick=\"editarTarefa(${tarefa.id})\">Editar</button>\r\n                <button class=\"bg-red-500 text-white p-1 rounded hover:bg-red-600\" onclick=\"excluirTarefa(${tarefa.id})\">Excluir</button>\r\n              </td>\r\n            </tr>\r\n          `\r\n        )\r\n        .join('');\r\n    }\r\n  \r\n    // Função para editar uma tarefa\r\n    window.editarTarefa = (tarefaId) => {\r\n      window.location.href = `criar_servico.html?tipo=editar&id=${tarefaId}&userId=${userId}`;\r\n    };\r\n  \r\n    // Função para excluir uma tarefa\r\n    window.excluirTarefa = async (tarefaId) => {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/tarefas/${tarefaId}`, {\r\n          method: 'DELETE',\r\n        });\r\n        if (response.ok) {\r\n          alert('Tarefa excluída com sucesso!');\r\n          carregarTarefas(); // Recarrega as tarefas após exclusão\r\n        } else {\r\n          throw new Error('Erro ao excluir tarefa');\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao excluir tarefa:', error);\r\n        alert('Erro ao excluir tarefa.');\r\n      }\r\n    };\r\n  \r\n    // Evento para alternar para a visão de contratante\r\n    btnContratante.addEventListener('click', () => {\r\n      contratanteSection.classList.remove('hidden');\r\n      prestadorSection.classList.add('hidden');\r\n      exibirTarefasContratante();\r\n    });\r\n  \r\n    // Evento para alternar para a visão de prestador\r\n    btnPrestador.addEventListener('click', () => {\r\n      prestadorSection.classList.remove('hidden');\r\n      contratanteSection.classList.add('hidden');\r\n      exibirTarefasPrestador();\r\n    });\r\n  \r\n    // Inicialização\r\n    if (userId) {\r\n      buscarUsuario(userId);\r\n    } else {\r\n      alert('ID do usuário não fornecido.');\r\n      window.location.href = 'login.html';\r\n    }\r\n  });\r\n\r\n/* VERIFICAR DEPOIS\r\n\r\n// Coordenadas do usuário (substitua pelas coordenadas reais do usuário)\r\nconst usuarioCoordenadas = {\r\n    latitude: -23.5505, // Exemplo: Latitude de São Paulo\r\n    longitude: -46.6333 // Exemplo: Longitude de São Paulo\r\n};\r\n\r\n// Serviços solicitados (Contratante)\r\nconst servicosSolicitados = [\r\n    {\r\n        id: \"distancia-solicitado-1\",\r\n        latitude: -23.5615, // Exemplo: Latitude de um serviço solicitado\r\n        longitude: -46.6553 // Exemplo: Longitude de um serviço solicitado\r\n    },\r\n    // Adicione mais serviços solicitados aqui\r\n];\r\n\r\n// Serviços oferecidos (Prestador)\r\nconst servicosOfertados = [\r\n    {\r\n        id: \"distancia-ofertado-1\",\r\n        latitude: -23.5700, // Exemplo: Latitude de um serviço oferecido\r\n        longitude: -48.6400 // Exemplo: Longitude de um serviço oferecido\r\n    },\r\n    // Adicione mais serviços oferecidos aqui\r\n];\r\n\r\n// Função para calcular a distância entre duas coordenadas (fórmula de Haversine)\r\nfunction calcularDistancia(lat1, lon1, lat2, lon2) {\r\n    const R = 6371; // Raio da Terra em km\r\n    const dLat = (lat2 - lat1) * (Math.PI / 180);\r\n    const dLon = (lon2 - lon1) * (Math.PI / 180);\r\n    const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * (Math.PI / 180)) * Math.cos(lat2 * (Math.PI / 180)) *\r\n        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n    return R * c; // Distância em km\r\n}\r\n\r\n// Função para exibir a distância dos serviços\r\nfunction exibirDistancias() {\r\n    // Serviços solicitados (Contratante)\r\n    servicosSolicitados.forEach(servico => {\r\n        const distancia = calcularDistancia(\r\n            usuarioCoordenadas.latitude,\r\n            usuarioCoordenadas.longitude,\r\n            servico.latitude,\r\n            servico.longitude\r\n        );\r\n        const distanciaFormatada = distancia.toFixed(2) + \" km\"; // Formata para 2 casas decimais\r\n        document.getElementById(servico.id).textContent = distanciaFormatada;\r\n    });\r\n\r\n    // Serviços oferecidos (Prestador)\r\n    servicosOfertados.forEach(servico => {\r\n        const distancia = calcularDistancia(\r\n            usuarioCoordenadas.latitude,\r\n            usuarioCoordenadas.longitude,\r\n            servico.latitude,\r\n            servico.longitude\r\n        );\r\n        const distanciaFormatada = distancia.toFixed(2) + \" km\"; // Formata para 2 casas decimais\r\n        document.getElementById(servico.id).textContent = distanciaFormatada;\r\n    });\r\n}\r\n\r\n// Função para alternar entre contratante e prestador\r\nfunction toggleRole(role) {\r\n    const contratanteSection = document.getElementById('contratante-section');\r\n    const prestadorSection = document.getElementById('prestador-section');\r\n    const btnContratante = document.getElementById('btn-contratante');\r\n    const btnPrestador = document.getElementById('btn-prestador');\r\n\r\n    if (role === 'contratante') {\r\n        contratanteSection.style.display = 'block';\r\n        prestadorSection.style.display = 'none';\r\n        btnContratante.classList.add('bg-orange-600');\r\n        btnPrestador.classList.remove('bg-orange-600');\r\n    } else {\r\n        contratanteSection.style.display = 'none';\r\n        prestadorSection.style.display = 'block';\r\n        btnContratante.classList.remove('bg-orange-600');\r\n        btnPrestador.classList.add('bg-orange-600');\r\n    }\r\n}\r\n\r\n// Adiciona eventos aos botões de alternância\r\ndocument.getElementById('btn-contratante').addEventListener('click', () => toggleRole('contratante'));\r\ndocument.getElementById('btn-prestador').addEventListener('click', () => toggleRole('prestador'));\r\n\r\n// Exibe as distâncias ao carregar a página\r\nexibirDistancias();\r\n\r\n*/"],"names":[],"version":3,"file":"home.bb2774e4.js.map","sourceRoot":"/__parcel_source_root/"}