{"mappings":"AAAA,SAAS,gBAAgB,CAAC,oBAAoB;IAC1C,MAAM,cAAc,SAAS,cAAc,CAAC;IAC5C,MAAM,YAAY,IAAI,gBAAgB,OAAO,QAAQ,CAAC,MAAM;IAC5D,MAAM,OAAO,UAAU,GAAG,CAAC,SAAS,kDAAkD;IACtF,MAAM,WAAW,UAAU,GAAG,CAAC,OAAO,6CAA6C;IACnF,MAAM,SAAS,UAAU,GAAG,CAAC,WAAW,wBAAwB;IAEhE,gEAAgE;IAChE,eAAe,eAAe,EAAE;QAC9B,IAAI;YACF,MAAM,WAAW,MAAM,MAAM,CAAC,8BAA8B,EAAE,IAAI;YAClE,MAAM,SAAS,MAAM,SAAS,IAAI;YAClC,IAAI,QACF,oBAAoB;iBACf;gBACL,MAAM;gBACN,OAAO,QAAQ,CAAC,IAAI,GAAG,CAAC,aAAa,EAAE,QAAQ;YACjD;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,MAAM;QACR;IACF;IAEA,4DAA4D;IAC5D,SAAS,oBAAoB,MAAM;QACjC,SAAS,cAAc,CAAC,QAAQ,KAAK,GAAG,OAAO,IAAI,KAAK,yBAAsB,WAAW;QACzF,SAAS,cAAc,CAAC,QAAQ,KAAK,GAAG,OAAO,IAAI;QACnD,SAAS,cAAc,CAAC,aAAa,KAAK,GAAG,OAAO,SAAS;QAC7D,SAAS,cAAc,CAAC,aAAa,KAAK,GAAG,OAAO,SAAS;QAC7D,SAAS,cAAc,CAAC,SAAS,KAAK,GAAG,OAAO,KAAK,IAAI;IAC3D;IAEA,4CAA4C;IAC5C,eAAe,aAAa,MAAM;QAChC,IAAI;YACF,IAAI,MAAM;YACV,IAAI,SAAS,QAAQ,2CAA2C;YAEhE,IAAI,UAAU;gBACZ,MAAM,CAAC,8BAA8B,EAAE,UAAU;gBACjD,SAAS,OAAO,6CAA6C;YAC/D;YAEA,MAAM,WAAW,MAAM,MAAM,KAAK;gBAChC,QAAQ;gBACR,SAAS;oBACP,gBAAgB;gBAClB;gBACA,MAAM,KAAK,SAAS,CAAC;YACvB;YAEA,IAAI,SAAS,EAAE,EAAE;gBACf,MAAM,WAAW,mCAAmC;gBACpD,OAAO,QAAQ,CAAC,IAAI,GAAG,CAAC,aAAa,EAAE,QAAQ;YACjD,OACE,MAAM,IAAI,MAAM;QAEpB,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,0BAA0B;YACxC,MAAM;QACR;IACF;IAEA,gCAAgC;IAChC,YAAY,gBAAgB,CAAC,UAAU,OAAO;QAC5C,MAAM,cAAc;QAEpB,8BAA8B;QAC9B,MAAM,SAAS;YACb,MAAM,SAAS,cAAc,CAAC,QAAQ,KAAK,KAAK,WAAW,yBAAsB;YACjF,MAAM,SAAS,cAAc,CAAC,QAAQ,KAAK;YAC3C,WAAW,SAAS,cAAc,CAAC,aAAa,KAAK;YACrD,WAAW,SAAS,cAAc,CAAC,aAAa,KAAK;YACrD,OAAO,SAAS,cAAc,CAAC,SAAS,KAAK,IAAI;YACjD,QAAQ;YACR,QAAQ;QACV;QAEA,kBAAkB;QAClB,MAAM,aAAa;IACrB;IAEA,gBAAgB;IAChB,IAAI,UACF,0DAA0D;IAC1D,eAAe;SACV,IAAI,MACT,oEAAoE;IACpE,SAAS,cAAc,CAAC,QAAQ,KAAK,GAAG;SACnC;QACL,MAAM;QACN,OAAO,QAAQ,CAAC,IAAI,GAAG,CAAC,aAAa,EAAE,QAAQ;IACjD;AACF","sources":["js/criar_servico.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\r\n    const formServico = document.getElementById('servico-form');\r\n    const urlParams = new URLSearchParams(window.location.search);\r\n    const tipo = urlParams.get('tipo'); // Obtém o tipo de serviço (oferta ou solicitação)\r\n    const tarefaId = urlParams.get('id'); // Obtém o ID da tarefa (se estiver editando)\r\n    const userId = urlParams.get('userId'); // Obtém o ID do usuário\r\n  \r\n    // Função para carregar os dados da tarefa (se estiver editando)\r\n    async function carregarTarefa(id) {\r\n      try {\r\n        const response = await fetch(`http://localhost:3000/tarefas/${id}`);\r\n        const tarefa = await response.json();\r\n        if (tarefa) {\r\n          preencherFormulario(tarefa);\r\n        } else {\r\n          alert('Tarefa não encontrada.');\r\n          window.location.href = `home.html?id=${userId}`;\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao carregar tarefa:', error);\r\n        alert('Erro ao carregar tarefa. Tente novamente.');\r\n      }\r\n    }\r\n  \r\n    // Função para preencher o formulário com os dados da tarefa\r\n    function preencherFormulario(tarefa) {\r\n      document.getElementById('tipo').value = tarefa.tipo === 'Oferta de Serviço' ? 'oferta' : 'solicitacao';\r\n      document.getElementById('nome').value = tarefa.nome;\r\n      document.getElementById('descricao').value = tarefa.descricao;\r\n      document.getElementById('categoria').value = tarefa.categoria;\r\n      document.getElementById('preco').value = tarefa.preco || '';\r\n    }\r\n  \r\n    // Função para criar ou atualizar uma tarefa\r\n    async function salvarTarefa(tarefa) {\r\n      try {\r\n        let url = 'http://localhost:3000/tarefas';\r\n        let method = 'POST'; // Método padrão para criar uma nova tarefa\r\n  \r\n        if (tarefaId) {\r\n          url = `http://localhost:3000/tarefas/${tarefaId}`;\r\n          method = 'PUT'; // Método para atualizar uma tarefa existente\r\n        }\r\n  \r\n        const response = await fetch(url, {\r\n          method: method,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify(tarefa),\r\n        });\r\n  \r\n        if (response.ok) {\r\n          alert(tarefaId ? 'Tarefa atualizada com sucesso!' : 'Tarefa criada com sucesso!');\r\n          window.location.href = `home.html?id=${userId}`;\r\n        } else {\r\n          throw new Error('Erro ao salvar tarefa');\r\n        }\r\n      } catch (error) {\r\n        console.error('Erro ao salvar tarefa:', error);\r\n        alert('Erro ao salvar tarefa. Tente novamente.');\r\n      }\r\n    }\r\n  \r\n    // Evento de envio do formulário\r\n    formServico.addEventListener('submit', async (event) => {\r\n      event.preventDefault();\r\n  \r\n      // Coletar dados do formulário\r\n      const tarefa = {\r\n        tipo: document.getElementById('tipo').value === 'oferta' ? 'Oferta de Serviço' : 'Solicitação de Serviço',\r\n        nome: document.getElementById('nome').value,\r\n        descricao: document.getElementById('descricao').value,\r\n        categoria: document.getElementById('categoria').value,\r\n        preco: document.getElementById('preco').value || null,\r\n        status: 'Pendente', // Status padrão para novas tarefas\r\n        userId: userId, // Associa a tarefa ao usuário logado\r\n      };\r\n  \r\n      // Salvar a tarefa\r\n      await salvarTarefa(tarefa);\r\n    });\r\n  \r\n    // Inicialização\r\n    if (tarefaId) {\r\n      // Se houver um ID de tarefa, carrega os dados para edição\r\n      carregarTarefa(tarefaId);\r\n    } else if (tipo) {\r\n      // Se houver um tipo de serviço, define o valor padrão no formulário\r\n      document.getElementById('tipo').value = tipo;\r\n    } else {\r\n      alert('Tipo de serviço não especificado.');\r\n      window.location.href = `home.html?id=${userId}`;\r\n    }\r\n  });"],"names":[],"version":3,"file":"criar_servico.efbabcea.js.map","sourceRoot":"/__parcel_source_root/"}